# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

<%= @project_name %> is a Rails <%= Rails.version rescue "8.0.2" %> application. [Add your project description here]

## Tool Permissions & Customization

```bash
# View current tool permissions
/permissions

# Customize tools for specific sessions
claude --allowedTools read,edit,bash --no-write  # Example: read-only session
claude --allowedTools bash,read,write           # Example: development session
```

## Development Commands

**Important**: Always use binstubs instead of `bundle exec` for better performance and consistency.

```bash
# Setup
bundle install
bin/rails db:create db:migrate db:seed

# Development server
bin/rails server
# or with Procfile for concurrent processes
bin/dev

# Testing
bin/rspec                            # Run all tests
bin/rspec spec/models/               # Run specific test directory
bin/rspec spec/models/user_spec.rb   # Run single test file

# Code quality
bin/rubocop                          # Linting
bin/rubocop --autocorrect            # Auto-fix correctable violations
bin/brakeman                         # Security scanning
```

## Architecture Overview

### Key Models & Relationships
[Document your main models and their relationships]

### Core Services
[List your service objects and their purposes]

### Controllers Structure
[Describe your controller organization]

## Technical Stack

- **Framework**: Rails <%= Rails.version rescue "8.0.2" %> with Hotwire (Turbo + Stimulus)
- **Database**: PostgreSQL with Active Record
- **Frontend**: TailwindCSS, Stimulus controllers
<% if options[:with_viewcomponents] %>- **ViewComponent**: Component-based architecture for reusable UI elements<% end %>
- **Testing**: RSpec with FactoryBot
- **Background Jobs**: [Your job processor]
- **Authorization**: [Your authorization system]

## Environment Variables

Required for development:
```
# Add your required environment variables here
```

## Rails Conventions

- Standard Rails naming conventions (snake_case)
- RuboCop for code style enforcement
- Follow Rails best practices and idioms

## Development Patterns

### Explore-Plan-Code-Commit Workflow
1. **Explore**: Read relevant files and understand context
2. **Plan**: Use "think" to trigger extended thinking mode for complex problems
3. **Code**: Implement solution incrementally with frequent testing
4. **Commit**: Create clear commit messages explaining the change

### Visual Development
- Take screenshots for UI work using Claude Code's image reading
- Iterate 2-3 times for visual improvements
- Use incremental screenshots to track progress

### Component Architecture
- Use ViewComponent for reusable UI elements (located in `app/components/`)
- Follow Rails conventions with Hotwire for reactive interfaces
- Utilize Stimulus controllers for JavaScript interactions

### PRD Workflow
- Use `.claude/commands/workflows/create-prd.md` for structured feature development
- PRDs should be saved in `/tasks/` directory as `prd-[feature-name].md`
- Follow the clarifying questions process before implementation

### Code Quality
- RuboCop for consistent styling
- Brakeman for security scanning
- Comprehensive test coverage with RSpec

## Testing Standards

- Write tests before implementation (TDD)
- **Verify tests fail first** - Confirm tests fail before writing implementation
- Maintain high test coverage but avoid "overfitting to the tests"
- Use FactoryBot for test data
- Follow RSpec best practices
- Test both happy path and edge cases

## Quick Documentation Tips

- Use `#` key to quickly document guidelines and patterns
- Be specific in instructions to Claude
- Course-correct early and often during development
- Provide clear context and expectations

## Important Reminders

- Always run tests before committing
- Use semantic commit messages with clear explanations
- Update the development journal for significant changes
- Follow the pre-commit checklist in `.claude/commands/quality/pre-commit.md`
- Use conversational Q&A to explore unfamiliar parts of the codebase